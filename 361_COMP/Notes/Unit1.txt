COMP 361 - System Analysis and Design
September 1, 2016

Unit 1: An Introduction to Systems Development
	
	-Applies to information systems.
	-Systems Analysis: "Understanding what the information system should accomplish."
	-Systems Design: "How many components of the system should be physically implemented."
	
	-Systems Development
		-Q: Purpoise of system analysis and design?
		-A: SA&D is about providing the tools to understand the need, capture the vision, and deploy a solution.

	-SDLC: System Development Life Cycle
		-Q: Six core processes in SDLC?
	-Iterative System Development
		-Q: Characteristics?
	-Documentation, diagrams, use cases, and object classes
		-Q: Why? How?



Section 1: From Beginning to End - An Overview of Systems Analysis and Design
	
	-An information system is a set of intwined computer components that collect, process, store, and provides
	 information needed for business tasks.
	-Systems Analyst: someone who acts as the bridge between the demands (customer) and programmer.
	-SA&D includes soft and hard skills.
	-System Analysis: activities which enable a person to understand what a new system should accomplish.
	-System Design: described 'how' the system will work.
	
	-SDLC is composed of six core processes required in making a new application:
		1. Identify the problem or need, obtain approval.
		2. Plan and monitor the project.
		3. Discover and understand the details of the problem.
		4. Design the system components that solve the problem.
		5. Build, test, and integrate components.
		6. Complete tests and deploy.

		Identify, Plan the work, Discover the issues, Design the parts, Test the parts, Deploy Solution
	
	-Agile Development: Information System Dev. process emphasizing flexibility.
	-Key element of iterative development: choose solution parts that can be done in two or four weeks.
	
	1. Fact finding and user involvement - discussing with users to identify primary use cases.
	2. Identifying use cases - use cases cover a single transaction/use by a user
	3. Identifying Object Classes - during interviews with product managers and user, identify nouns to be used as object developments.
	4. Developing Use Case Descriptions and Workflow Diagrams
	5. Designing the Database
	6. Approaching High-Level Systems Design: use one of the documents in earlier design to begin defining classes and relationships
	7. Designing the Overall Architecture: Browser? Mobile? Database style? etc.
	8. Defining the Preliminary Design Class Diagram: domain classes, view classes, utility, etc. Problem domain classes
		are usually derived from classes identified during analysis - problem (user need) domain classes.
	9. Designing Subsystem Architecture: View and object classes
	10. Managing the Project: 

	Workflow Diagrams (Pg. 17):
		-Ovals represent tasks
		-Diamonds represent decision points
		-Arrows represent sequence of flow
		-Columns represent who performs each task
		-Arrows across are important, indicate a screen or webpage to capture or display info

	-A user interface is essentially the system.
	-Drill down technique: Search and specification on top, results below, allowing for further searches

	-Design is the bridge between understanding and construction
